// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  email      String    @unique
  password   String?
  phone      String?
  dob        String?
  gender     String?
  profession String?
  website    String?
  facebook   String?
  address    String?
  bio        String?
  image      String?
  isAdmin    Boolean?  @default(false)
  role       String    @default("user") 
  otp        String?   @default("0") 

  events     Events[]
  comments Comment[]

   // Follow relations
  following  Follow[] @relation("FollowingRelation")
  followers  Follow[] @relation("FollowerRelation")
    registrations RegisterEvent[]
}

model Follow {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId   String   @db.ObjectId
  followingId  String   @db.ObjectId

  follower     User     @relation("FollowerRelation", fields: [followerId], references: [id])
  following    User     @relation("FollowingRelation", fields: [followingId], references: [id])
  
  createdAt    DateTime @default(now())
}

type SpeakerEmbedded {
  name    String
  image   String
  details String
}

model Events {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  eName             String
  hostName          String
  eStDateAndTime    String
  eEndDateAndTime   String
  eDes              String
  category          String
  banner            String
  isOnline          Boolean?
  isPublish         Boolean?
  eAddress          String?
  fbUrl             String?
  zoomLink          String?
  refindPolicy      String?
  tremsAndCon       Boolean?
  userId            String @db.ObjectId
  creator           User  @relation(fields: [userId], references: [id])

  tickets           Ticket[] @relation("EventsToTicket") 
  comments          Comment[]
  registrations     RegisterEvent[] @relation("EventRegistrations")
  speakers           SpeakerEmbedded[] 

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  userId    String   @db.ObjectId
  eventId   String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  event     Events   @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  eventId          String       @db.ObjectId
  event            Events   @relation("EventsToTicket", fields: [eventId], references: [id], onDelete: Cascade)
  startSelling     DateTime
  stopSelling      DateTime
  totalTickets     Int
  maxTicketsPerOrder Int

  sellFeesToBuyer  String
  hasTablesOrGroups Boolean     @default(false)
  limitToOne       Boolean      @default(false)

  ticketTypes      TicketType[] // Embedded array

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

type TicketType {
  ticketName       String
  price            Float
  quantity         Int
  sellStartAndEnd  DateTime[] // [startDate, endDate]
}

model FormBuilderData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  ticketId  String   @db.ObjectId
  formData  Json     // formBuilder JSON data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegisterEvent {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId       String   @db.ObjectId
  ticketId      String   @db.ObjectId
  userId        String   @db.ObjectId
  eventCreatorId        String   @db.ObjectId

  userJson      Json                  
  attendeeJson  Json?   

  ticketCount   Int                     
  ticketPrice   String?                 
  ticketType    String               

  order         Boolean? @default(false)     

  transactionId String? 
  amount        Float?       
  currency      String?   @default("BDT")
  paymentStatus String?   @default("Pending")

  user          User     @relation(fields: [userId], references: [id])
  event         Events   @relation("EventRegistrations", fields: [eventId], references: [id]) 

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Logo{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  logo          String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Hero{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  des           String
  btn           String
  image         String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  catImage      String
  catName       String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Plan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // Free, Pro, Premium
  price       Float
  duration    Int      // in days (30 for monthly, 365 for yearly)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]
}

model Subscription {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   
  userEmail   String   
  planId      String   @db.ObjectId
  plan        Plan     @relation(fields: [planId], references: [id])
  status      String   @default("active") 
  startDate   DateTime @default(now())
  endDate     DateTime
  transactionId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}